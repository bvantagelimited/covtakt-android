apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: "com.cookpad.android.plugin.license-tools"
apply plugin: 'com.google.firebase.crashlytics'


apply plugin: 'com.jaredsburrows.license'
buildscript {
    repositories {
        google()
    }

    dependencies {
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.3.1'
    }
}

def getBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().substring(0, 3).trim()
}


android {

    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        def CONFIG = rootProject.ext
        applicationId "rs.covtakt"
        resValue "string", "build_config_package", "rs.covtakt"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 42
        versionName "1.0.42"
        buildConfigField "String", "GITHASH", "\"${getGitHash()}\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

        buildConfigField "String", "STORE_URL", "\"${CONFIG.STORE_URL}\""
        buildConfigField "String", "PRIVACY_URL", "\"PRIVACY_URL\""
//
        buildConfigField "String", "FIREBASE_REGION", "\"${CONFIG.FIREBASE_REGION}\""
//
        buildConfigField "String", "ORG", "\"ORG\""
        buildConfigField "int", "SERVICE_FOREGROUND_NOTIFICATION_ID", "${CONFIG.SERVICE_FOREGROUND_NOTIFICATION_ID}"
        buildConfigField "String", "SERVICE_FOREGROUND_CHANNEL_ID", "\"${CONFIG.SERVICE_FOREGROUND_CHANNEL_ID}\""
        buildConfigField "String", "SERVICE_FOREGROUND_CHANNEL_NAME", "\"SERVICE_FOREGROUND_CHANNEL_NAME\""
//
        buildConfigField "int", "PUSH_NOTIFICATION_ID",  "${CONFIG.PUSH_NOTIFICATION_ID}"
        buildConfigField "String", "PUSH_NOTIFICATION_CHANNEL_NAME", "\"PUSH_NOTIFICATION_CHANNEL_NAME\""
//
        buildConfigField "long", "SCAN_DURATION", "8000"
        buildConfigField "long", "MIN_SCAN_INTERVAL", "36000"
        buildConfigField "long", "MAX_SCAN_INTERVAL", "43000"
        buildConfigField "long", "MAX_QUEUE_TIME", "7000"
        buildConfigField "long", "BM_CHECK_INTERVAL", "540000"
        buildConfigField "long", "HEALTH_CHECK_INTERVAL", "900000"
        buildConfigField "long", "PURGE_INTERVAL", "86400000"
        //14 days
        buildConfigField "long", "PURGE_TTL", "1209600000"
        //buildConfigField "long", "PURGE_TTL", "1814400000"
        buildConfigField "long", "CONNECTION_TIMEOUT", "6000"
        buildConfigField "long", "BLACKLIST_DURATION", "100000"

        buildConfigField "long", "ADVERTISING_DURATION", "180000"

        buildConfigField "long", "ADVERTISING_INTERVAL", "5000"
//
        buildConfigField "String", "V2_CHARACTERISTIC_ID", "\"${CONFIG.V2_CHARACTERISTIC_ID}\""

    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable "InvalidPackage", "MissingTranslation"
    }

    signingConfigs {

//        debug {
//            def CONFIG = rootProject.ext
//            storeFile file("${CONFIG.STORE_FILE_PATH}")
//            storePassword "${CONFIG.STORE_PASSWORD}"
//            keyAlias "${CONFIG.KEY_ALIAS}"
//            keyPassword "${CONFIG.STORE_PASSWORD}"
//        }
    }
    flavorDimensions "default"
    productFlavors {
        mockup {
            minSdkVersion 21
            ext.enableCrashlytics = false
            def CONFIG = rootProject.ext
            applicationId "rs.covtakt.staging"

            buildConfigField "String", "FIREBASE_UPLOAD_BUCKET", "\"${CONFIG.Staging.FIREBASE_UPLOAD_BUCKET}\""
            buildConfigField "String", "BLE_SSID", "\"${CONFIG.Staging.BLE_SSID}\""
        }
        staging {
            def CONFIG = rootProject.ext
            applicationId "rs.covtakt.staging"
            buildConfigField "String", "FIREBASE_UPLOAD_BUCKET", "\"${CONFIG.Staging.FIREBASE_UPLOAD_BUCKET}\""
            buildConfigField "String", "BLE_SSID", "\"${CONFIG.Staging.BLE_SSID}\""

            versionNameSuffix "Staging" + "_" + "${defaultConfig.versionName}"
        }
        production {
            def CONFIG = rootProject.ext
            applicationId "rs.covtakt"
            buildConfigField "String", "FIREBASE_UPLOAD_BUCKET", "\"${CONFIG.Production.FIREBASE_UPLOAD_BUCKET}\""
            buildConfigField "String", "BLE_SSID", "\"${CONFIG.Production.BLE_SSID}\""





        }
    }

    buildTypes {
        release {
            // shrinkResources true
            crunchPngs false
            minifyEnabled false
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            multiDexEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }


    // Add for using latest experimental build of Android Extensions
    androidExtensions {
        experimental = true
    }
    aaptOptions {
        ignoreAssetsPattern "!values-b+sr+Latn"
    }

    applicationVariants.all { variant ->
        if(variant.buildType.name == "release") {
            variant.outputs.all {
                def date = new Date()
                def formattedDate = date.format('yyyy-MM-dd_HH-mm')
                def flavor = variant.productFlavors[0].name

                outputFileName = "${formattedDate}_${defaultConfig.versionName}_${flavor}.apk"
            }
        }
    }

}


dependencies {
    def appDependencies = rootProject.ext.dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation group: 'androidx.localbroadcastmanager', name: 'localbroadcastmanager', version: '1.0.0-alpha3'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'com.squareup.okhttp3:okhttp:4.5.0'
    implementation 'org.jsoup:jsoup:1.7.3'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.hbb20:ccp:2.3.7'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Room components
    def room_version = "2.2.3"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation "com.google.android.material:material:1.2.0-alpha04"

    def archLifecycleVersion = "2.2.0"
    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
//    implementation 'com.ipification.mobile.sdk.android:ipification-android-sdk-release@aar'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'

    implementation appDependencies.firebase.auth
    //implementation appDependencies.firebase.core
    implementation appDependencies.firebase.iid
    implementation appDependencies.firebase.messaging
    implementation appDependencies.firebase.jobdispatcher
    implementation appDependencies.firebase.database
    implementation appDependencies.firebase.crashlytics
    implementation 'com.google.firebase:firebase-firestore-ktx:21.4.2'
    implementation 'com.google.firebase:firebase-storage:19.1.1'
    implementation  "com.google.firebase:firebase-functions:19.0.2"
    implementation 'com.google.firebase:firebase-config-ktx:19.1.2'
    implementation 'com.google.firebase:firebase-analytics:17.2.3'
    //bottom navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'

    //cardview
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.guava:guava:28.2-android'

    //Lotties
    implementation 'com.airbnb.android:lottie:3.4.0'


}

repositories{
    flatDir{
        dirs 'libs'
    }
}
